def boolean runProcess(String... cmd) {
  System.out.println("\n${cmd.join(' ')}")

  Process p = new ProcessBuilder(cmd)
    .redirectErrorStream(true)
    .start()

  OutputStreamConsumer osConsumer = new OutputStreamConsumer(p.inputStream)
  osConsumer.start()
  OutputStreamConsumer errConsumer = new OutputStreamConsumer(p.errorStream)
  errConsumer.start()

  int ret = p.waitFor()
  p.destroy()

  osConsumer.join()
  errConsumer.join()

  return ret == 0
}

def List<String> getProcessOutput(String... cmd) {
  System.out.println("\n${cmd.join(' ')}")

  Process p = new ProcessBuilder(cmd)
    .redirectErrorStream(true)
    .start()

  OutputStreamReturner osReturner = new OutputStreamReturner(p.inputStream)
  osReturner.start()
  OutputStreamConsumer errConsumer = new OutputStreamConsumer(p.errorStream)
  errConsumer.start()

  p.waitFor()
  p.destroy()

  osReturner.join()
  errConsumer.join()

  return osReturner.output
}

class OutputStreamReturner extends Thread {
  private final BufferedReader is
  private final List<String> output = new ArrayList<>();

  public OutputStreamReturner(InputStream is) {
    this.is = new BufferedReader(new InputStreamReader(is))
  }

  @Override
  public void run() {
    try {
      String line = null
      while ((line = is.readLine()) != null) {
        output.add(line)
      }
    }
    catch(IOException ignore) {}
  }

  public List<String> getOutput() {
    return output;
  }
}

class OutputStreamConsumer extends Thread {
  private final BufferedReader is

  public OutputStreamConsumer(InputStream is) {
    this.is = new BufferedReader(new InputStreamReader(is))
  }

  @Override
  public void run() {
    try {
      String line = null
      while ((line = is.readLine()) != null) {
        System.out.println(line)
      }
    }
    catch(IOException ignore) {}
  }
}

ext {
  runProcess = this.&runProcess
  getProcessOutput = this.&getProcessOutput
}